# Authors: Chia-Hsin Chen
#          Chen Sun
#          Tushar Krishna

# All fields set to 0 will be replaced by the interface code 
# (util/on-chip-network-power-area.py)
###############################################################################
# Model Specifications (overwritten by Garnet)
###############################################################################
# Name of model to be built and evaluated
ModelName                               = Router
# Injection rate (# flits per cycle per port), assuming that the router is not
# saturated
InjectionRate                           = 0.3
# Number of input ports
NumberInputPorts                        = 5
# Number of output ports
NumberOutputPorts                       = 5
# Flit width (bit)
NumberBitsPerFlit                       = 64

# In this example, we define 2 virtual networks (message classes), VN1 and VN2. 
#                           VN1 VN2
# Number of VCs              2   3
# Number of buffers / VC     4   5
#
# So in total, there are (2 * 4) + (3 * 5) = 23 flit buffers
#
# Number of virtual networks (number of message classes)
NumberVirtualNetworks                   = 1
# Number of virtual channels per virtual network
NumberVirtualChannelsPerVirtualNetwork  = [1]
# Number of buffers per virtual channel
NumberBuffersPerVirtualChannel          = [1]

###############################################################################
# Technology Specifications 
###############################################################################
# Technology file (see other models in tech/models)
ElectricalTechModelFilename             = ext/dsent/tech/tech_models/Bulk32LVT.model

# InputPort 
# ---------
# buffer model
InputPort->BufferModel                  = DFFRAM

# Crossbar
# --------
# crossbar model
CrossbarModel                           = MultiplexerCrossbar

# Switch allocator
# ----------------
# arbiter model
SwitchAllocator->ArbiterModel           = MatrixArbiter

# Clock tree
# ----------
# clock tree model
ClockTreeModel                          = BroadcastHTree
# number of levels
ClockTree->NumberLevels                 = 5
# wire layer
ClockTree->WireLayer                    = Global
# wire width multiplier
ClockTree->WireWidthMultiplier          = 1.0

###############################################################################
# Timing optimization
###############################################################################
# True if want to perform timing optimization; otherwise, false.
IsPerformTimingOptimization             = true
# Nets that the timing optimizer starts from
TimingOptimization->StartNetNames       = [*]
# Operating frequency (Hz)
Frequency                               = 1.0e9 # set by Garnet

###############################################################################
# Runtime Activity (set by Garnet)
###############################################################################
# Number of Cycles
NumCycles                               = 0
# Number of Buffer Reads
NumBufferReads                          = 0
# Number of Buffer Writes
NumBufferWrites                         = 0
# Switch Arbiters Stage 1
NumSwInportArb                          = 0
# Switch Arbiters Stage 2
NumSwOutportArb                         = 0
# Number of Crossbar Traversals
NumCrossbarTraversals                   = 0

###############################################################################
# Evaluation String (input to DSENT)   
###############################################################################
EvaluateString                          = \
    buf_rd_dynamic  = $(Energy>>Router:ReadBuffer); \
    buf_wr_dynamic  = $(Energy>>Router:WriteBuffer); \
    buf_static      = $(NddPower>>Router->InputPort:Leakage) * $(NumberInputPorts) + ($(NddPower>>Router->PipelineReg0:Leakage) + $(NddPower>>Router->PipelineReg1:Leakage)) * $(NumberInputPorts) * $(NumberBitsPerFlit); \
    xbar_o_dynamic  = $(Energy>>Router:TraverseCrossbar->Multicast1); \
    xbar_static     = $(NddPower>>Router->Crossbar:Leakage) + $(NddPower>>Router->PipelineReg2_0:Leakage) * $(NumberOutputPorts) * $(NumberBitsPerFlit); \
    sa_in_dynamic   = $(Energy>>Router:ArbitrateSwitch->ArbitrateStage1); \
    sa_out_dynamic  = $(Energy>>Router:ArbitrateSwitch->ArbitrateStage2); \
    sa_static       = $(NddPower>>Router->SwitchAllocator:Leakage); \
    clock_o_dynamic = $(Energy>>Router:DistributeClock); \
    clock_static    = $(NddPower>>Router->ClockTree:Leakage); \
    buffer_dynamic  = ((buf_wr_dynamic * $(NumBufferWrites)) + (buf_rd_dynamic * $(NumBufferReads))) * $(Frequency) / $(NumCycles); \
    buffer_leakage  = buf_static; \
    xbar_dynamic    = (xbar_o_dynamic * $(NumCrossbarTraversals)) * $(Frequency) / $(NumCycles); \
    xbar_leakage    = xbar_static; \
    sa_dynamic      = ((sa_in_dynamic * $(NumSwInportArb)) + (sa_out_dynamic * $(NumSwOutportArb))) * $(Frequency) / $(NumCycles); \
    sa_leakage      = sa_static; \
    clock_dynamic   = clock_o_dynamic * $(Frequency); \
    clock_leakage   = clock_static; \
    total_dynamic   = buffer_dynamic + xbar_dynamic + sa_dynamic + clock_dynamic; \
    total_leakage   = buffer_leakage + xbar_leakage + sa_leakage + clock_leakage; \
    buf_area        = ($(Area>>Router->InputPort:Active) + ($(Area>>Router->PipelineReg0:Active) + $(Area>>Router->PipelineReg1:Active)) * $(NumberBitsPerFlit)) * $(NumberInputPorts); \
    xbar_area       = $(Area>>Router->Crossbar:Active) + $(Area>>Router->Crossbar_Sel_DFF:Active) + $(Area>>Router->PipelineReg2_0:Active) * $(NumberBitsPerFlit) * $(NumberOutputPorts); \
    sa_area         = $(Area>>Router->SwitchAllocator:Active); \
    other_area      = $(Area>>Router->ClockTree:Active); \
    print "Buffer:"; \
    print "    Dynamic energy/access Write (J): " buf_wr_dynamic; \
    print "    Dynamic energy/access Read (J): " buf_rd_dynamic; \
    print "    Dynamic power (W): " buffer_dynamic; \
    print "    Leakage power (W): " buffer_leakage; \
    print "Crossbar:"; \
    print "    Dynamic energy/access (J): " xbar_o_dynamic; \
    print "    Dynamic power (W): " xbar_dynamic; \
    print "    Leakage power (W): " xbar_leakage; \
    print "Switch Allocator:"; \
    print "    Dynamic energy/access Stage 1 (J): " sa_in_dynamic; \
    print "    Dynamic energy/access Stage 2 (J): " sa_out_dynamic; \
    print "    Dynamic power (W): " sa_dynamic; \
    print "    Leakage power (W): " sa_leakage; \
    print "Clock:"; \
    print "    Dynamic energy/cycle (J): " clock_o_dynamic; \
    print "    Dynamic power (W): " clock_dynamic; \
    print "    Leakage power (W): " clock_leakage; \
    print "Total Power:"; \
    print "    Dynamic power (W): " total_dynamic; \
    print "    Leakage power (Sum) (W): " total_leakage; \
    print "    Leakage power (by DSENT) (W): " $(NddPower>>Router:Leakage); \
    print "Area:"; \
    print "    Buffer (m^2):           " buf_area; \
    print "    Crossbar (m^2):         " xbar_area; \
    print "    Switch Allocator (m^2): " sa_area; \
    print "    Other (m^2):            " other_area; \
    print "num of inport arbs: " $(NumSwInportArb); \
    print "num of outport arbs: " $(NumSwOutportArb); \
    print "num of inports: " $(NumberInputPorts); \
    print "num of outports: " $(NumberOutputPorts); \



