//This part belongs to Topology.cc
if (src < m_nodes) {
    src_dest.first = src;
    src_dest.second = dest;
    std::vector<LinkEntry> links = m_link_map[src_dest];
    for (int l = 0; l < links.size(); l++) {
        link_entry = links[l];
        std::vector<NetDest> linkRoute;
        linkRoute.resize(m_vnets);
        BasicLink *link = link_entry.link;
        if (link->mVnets.size() == 0) {
            net->makeExtInLink(src, dest - (2 * m_nodes), link,
                            routing_table_entry);
        } else {
            for (int v = 0; v< link->mVnets.size(); v++) {
                int vnet = link->mVnets[v];
                linkRoute[vnet] = routing_table_entry[vnet];
            }
            net->makeExtInLink(src, dest - (2 * m_nodes), link,
                            linkRoute);
        }
    }
} else if (dest < 2*m_nodes) {
    assert(dest >= m_nodes);
    NodeID node = dest - m_nodes;
    src_dest.first = src;
    src_dest.second = dest;
    std::vector<LinkEntry> links = m_link_map[src_dest];
    for (int l = 0; l < links.size(); l++) {
        link_entry = links[l];
        std::vector<NetDest> linkRoute;
        linkRoute.resize(m_vnets);
        BasicLink *link = link_entry.link;
        if (link->mVnets.size() == 0) {
            net->makeExtOutLink(src - (2 * m_nodes), node, link,
                             routing_table_entry);
        } else {
            for (int v = 0; v< link->mVnets.size(); v++) {
                int vnet = link->mVnets[v];
                linkRoute[vnet] = routing_table_entry[vnet];
            }
            net->makeExtOutLink(src - (2 * m_nodes), node, link,
                            linkRoute);
        }
    }
} else {
    assert((src >= 2 * m_nodes) && (dest >= 2 * m_nodes));
    src_dest.first = src;
    src_dest.second = dest;
    std::vector<LinkEntry> links = m_link_map[src_dest];
    for (int l = 0; l < links.size(); l++) {
        link_entry = links[l];
        std::vector<NetDest> linkRoute;
        linkRoute.resize(m_vnets);
        BasicLink *link = link_entry.link;
        if (link->mVnets.size() == 0) {
            net->makeInternalLink(src - (2 * m_nodes),
                          dest - (2 * m_nodes), link, routing_table_entry,
                          link_entry.src_outport_dirn,
                          link_entry.dst_inport_dirn);
        } else {
            for (int v = 0; v< link->mVnets.size(); v++) {
                int vnet = link->mVnets[v];
                linkRoute[vnet] = routing_table_entry[vnet];
            }
            net->makeInternalLink(src - (2 * m_nodes),
                          dest - (2 * m_nodes), link, linkRoute,
                          link_entry.src_outport_dirn,
                          link_entry.dst_inport_dirn);
        }
    }
}
